package gnofundme // Package gnofundme provides a simple crowdfunding system.

import (
	"strconv"
	"strings"
	"time"
)

type ctype int

const (
	Personal ctype = iota
	// for a person (yourself or another person): can be for humanitarian reason, emergency needs, or other (beneficiary = owner)
	Cause
	// for a cause:Â you will manage the funds (based on trust) (beneficiary = owner)
	Organism
	// for an organism, charity... (beneficiary != owner)
	// the next types are for companies(startup projects...) crowdfunding
	Donation
	Reward
	Equity
)

func (c ctype) String() string {
	return [...]string{"Personal", "Cause", "Organism", "Donation", "Reward", "Equity"}[c]
}

type Campaign struct {
	// Campaign type
	Ctype       ctype
	Title       string
	Description string
	Goal        int64
	Current     int64
	Begin       time.Time
	Deadline    time.Time
	Owner       *User
	// Campaign beneficiary (can be the owner or another address)
	Beneficiary  *User
	contributors []*Contributor
}

func NewCampaign(ct int, title string, description string, goal int64, begin time.Time, deadline time.Time, owner *User, beneficiary *User) *Campaign {
	campaign := &Campaign{
		Ctype:        ctype(ct),
		Title:        title,
		Description:  description,
		Goal:         goal,
		Current:      0,
		Begin:        begin,
		Deadline:     deadline,
		Owner:        owner,
		Beneficiary:  beneficiary,
		contributors: make([]*Contributor, 0),
	}

	owner.campaigns = append(owner.campaigns, campaign)
	return campaign
}

func (c Campaign) GetContributors() []*Contributor {
	return c.contributors
}

func (c *Campaign) AddContributor(user *User, date time.Time, amount int64, display bool) *Contributor {
	c.Current += amount
	contributor := NewContributor(user, date, amount, display)
	c.contributors = append(c.contributors, contributor)

	return contributor
}

// CampaignsToJSONString converts a slice of Campaigns structs into a JSON string
func CampaignsToJSONString(campaigns []*Campaign) string {
	var sb strings.Builder
	sb.WriteString("[")

	for i, campaign := range campaigns {
		if i > 0 {
			sb.WriteString(",")
		}

		sb.WriteString(CampaignToJSONString(campaign))
	}
	sb.WriteString("]")

	return sb.String()
}

// CampaignToJSONString returns a Campaign formatted as a JSON string
func CampaignToJSONString(campaign *Campaign) string {
	var sb strings.Builder

	sb.WriteString("{")
	sb.WriteString(`"ctype":"` + campaign.Ctype.String() + `",`)
	sb.WriteString(`"title":"` + campaign.Title + `",`)
	sb.WriteString(`"description":"` + campaign.Description + `",`)
	sb.WriteString(`"goal":"` + strconv.Itoa(int(campaign.Goal)) + `",`)
	sb.WriteString(`"current":"` + strconv.Itoa(int(campaign.Current)) + `",`)
	sb.WriteString(`"begin":"` + strconv.Itoa(int((campaign.Begin).Unix())) + `",`)
	sb.WriteString(`"deadline":"` + strconv.Itoa(int(campaign.Deadline.Unix())) + `",`)
	sb.WriteString(`"owner":"` + campaign.Owner.GetAddress().String() + `",`)
	sb.WriteString(`"beneficiary":"` + campaign.Beneficiary.GetAddress().String() + `",`)
	sb.WriteString(`"contributors":"` + strconv.Itoa(len(campaign.contributors)) + `"`)
	sb.WriteString("}")

	return sb.String()
}
